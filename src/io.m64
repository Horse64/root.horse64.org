## @module io
# Copyright (c) 2024, ellie/@ell1e & m64 stdlib authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

#prep{c_defs.SPEW3D_OPTION_DISABLE_SDL=1}
#c_import "spew3d.horse64.org/include/spew3d.h" as c_spew3d

c_import "stdlib.h" as c_stdlib
c_import "stdio.h" as c_stdlib
c_import "string.h" as c_stdlib

import memory from m64.horse64.org
import str from m64.horse64.org

func print_stderr(data <- readonly byte array) {
    var print_amount <- size = data.len
    if print_amount == memory.array_size_unset {
        print_amount = memory.c_str_nulpos(data.data)
    }
    print_c_array(data.data, print_amount)
}

func print_stderr_c_str(
        data <- readonly byte c_array
        ) override {
    var data_len <- size = memory.c_str_nulpos(data)
    print_stderr_c_array(data, data_len)
}

func print_stderr_c_array(data <- readonly byte c_array,
        data_len <- size) override {
    var i <- size = 1
    while i <= data_len {
        c_stdlib.printf(
            "%c", data[i]
        )
        i += 1
    }
    c_stdlib.printf("%s", "\n")
}

func print_stderr_str(
        my_str <- readonly str.str implicit ref
        ) override {
    if my_str._on_heap {
        if my_str._heap.buf.len > 1 {
            print_c_array(
                my_str._heap.buf.data,
                my_str._heap.buf.len - 1
            )
        }
    } else {
        if my_str._stack_buf_len > 1 {
            print_c_array(
                my_str._stack_buf,
                my_str._stack_buf_len - 1
            )
        }
    }
}

func print(data <- readonly byte array) {
    var print_amount <- size = data.len
    if print_amount == memory.array_size_unset {
        print_amount = memory.c_str_nulpos(data.data)
    }
    print_c_array(data.data, print_amount)
}

func print_c_str(
        data <- readonly byte c_array
        ) override {
    var data_len <- size = memory.c_str_nulpos(data)
    print_stderr_c_array(data, data_len)
}

func print_c_array(data <- readonly byte c_array,
        data_len <- size) override {
    var i <- size = 1
    while i <= data_len {
        c_stdlib.printf(
            "%c", data[i]
        )
        i += 1
    }
    c_stdlib.printf("%s", "\n")
}

func print_str(my_str <- readonly str.str implicit ref) override {
    if my_str._on_heap {
        if my_str._heap.buf.len > 1 {
            print_c_array(
                my_str._heap.buf.data,
                my_str._heap.buf.len - 1
            )
        }
    } else {
        if my_str._stack_buf_len > 1 {
            print_c_array(
                my_str._stack_buf,
                my_str._stack_buf_len - 1
            )
        }
    }
}

