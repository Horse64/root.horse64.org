## @module debug
# Copyright (c) 2024-2025, ellie/@ell1e & m64 stdlib authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

c_import "stdlib.h" as c_stdlib

import io from m64.horse64.org
import memory from m64.horse64.org
import str from m64.horse64.org
import system from m64.horse64.org

func assert(condition <- bool) {
    if not condition {
        io.print_stderr(
            "ASSERTION FAILED, exiting program..."
        )
        c_stdlib.abort()
    }
}

func assert_with_cstr_msg(condition <- bool,
        msg <- readonly byte c_array) override {
    var msg_data <- readonly byte c_array = msg
    var msg_len <- size = memory.c_str_nulpos(msg)
    if not condition {
        io.print_stderr(
            "ASSERTION FAILED, exiting program..."
        )
        c_stdlib.abort()
    }
}

func assert_with_str_msg(condition <- bool,
        msg <- readonly str.str implicit ref) override {
    var msg_data <- readonly byte c_array
    var msg_len <- size
    if msg._on_heap {
        if msg._heap_buf.len > 1 {
            msg_data = msg._heap_buf.data
            msg_len = msg._heap_buf.len - 1
        }
    } else {
        if msg._stack_buf_len > 1 {
            msg_data = msg._stack_buf
            msg_len = msg._stack_buf_len - 1
        }
    }
    if not condition {
        io.print_stderr(
            "ASSERTION FAILED, exiting program..."
        )
        c_stdlib.abort()
    }
}

func assert_ex(condition <- bool,
        call_line <- size,
        call_col <- size,
        call_uri_bytes <- readonly byte c_array,
        call_uri_bytes_len <- size,
        expr_str_bytes <- readonly byte c_array,
        expr_str_bytes_len <- size,
        ) {
    if not condition {
        io.print_stderr(
            "ASSERTION FAILED, exiting program..."
        )
        c_stdlib.abort()
    }
}

func assert_ex_with_cstr_msg(condition <- bool,
        call_line <- size,
        call_col <- size,
        call_uri_bytes <- readonly byte c_array,
        call_uri_bytes_len <- size,
        expr_str_bytes <- readonly byte c_array,
        expr_str_bytes_len <- size,
        msg <- readonly byte c_array) override {
    var msg_data <- readonly byte c_array = msg
    var msg_len <- size = memory.c_str_nulpos(msg)
    if not condition {
        io.print_stderr(
            "ASSERTION FAILED, exiting program..."
        )
        c_stdlib.abort()
    }
}

func assert_ex_with_str_msg(condition <- bool,
        call_line <- size,
        call_col <- size,
        call_uri_bytes <- readonly byte c_array,
        call_uri_bytes_len <- size,
        expr_str_bytes <- readonly byte c_array,
        expr_str_bytes_len <- size,
        msg <- readonly str.str implicit ref) override {
    var msg_data <- readonly byte c_array
    var msg_len <- size
    if msg._on_heap {
        if msg._heap_buf.len > 1 {
            msg_data = msg._heap_buf.data
            msg_len = msg._heap_buf.len - 1
        }
    } else {
        if msg._stack_buf_len > 1 {
            msg_data = msg._stack_buf
            msg_len = msg._stack_buf_len - 1
        }
    }
    if not condition {
        io.print_stderr(
            "ASSERTION FAILED, exiting program..."
        )
        c_stdlib.abort()
    }
}

