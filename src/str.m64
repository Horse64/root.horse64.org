## @module str
# Copyright (c) 2024-2025, ellie/@ell1e & m64 stdlib authors (see AUTHORS.md).
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Alternatively, at your option, this file is offered under the Apache 2
# license, see accompanied LICENSE.md.

c_import "stdlib.h" as c_stdlib
c_import "stdio.h" as c_stdlib
c_import "string.h" as c_stdlib

import debug from m64.horse64.org
import limit from m64.horse64.org
import memory from m64.horse64.org

const str_stack_bytes <- size = 32

struct str {
    union {
        struct {
            var _stack_buf <- byte c_array[str_stack_bytes]
            var _stack_buf_len <- u16
        }
        struct {
            var _heap_buf <- byte array
        }
    }
    var _on_heap <- bool
}

func str.init_as_copy(
        other_str <- readonly str implicit ref
        ) failable override {
    self.copy_from(other_str)
    if failed(self.copy_from) {
        return failed
    }
}

func str.init_from_inline_c_str(
        c_str <- readonly byte c_array
        ) failable override {
    var c_array_var <- readonly byte array =
        memory.alloc_array(
            0, 0
        )
    if failed(memory.alloc_array) {
        return failed
    }
    defer memory.unalloc_array(c_array_var)
    c_array_var.data = c_str
    c_array_var.len = memory.c_str_nulpos(c_str)
    self.init_from_bytebuf(c_array_var)
    if failed(self.init_from_bytebuf) {
        return failed
    }
    c_array_var.data = none
}

func str.init_from_bytebuf(
        c_str <- readonly byte array
        ) failable override {
    var str_len <- size
    if c_str.len == memory.array_size_unset {
        str_len = memory.c_str_nulpos(c_str.data)
    } else {
        str_len = c_str.len
    }
    if str_len < str_stack_bytes {
        memory.copy(
            c_str.data, self._stack_buf, str_len
        )
        self._stack_buf[str_len + 1] = 0
        self._stack_buf_len = str_len + 1
        return
    }
    self._on_heap = yes
    if self._heap_buf != none {
        memory.unalloc_array(self._heap_buf)
    }
    self._heap_buf = memory.alloc_array(
        memory.size_of(self._heap_buf.data),
        str_len + 1
    )
    if failed(memory.alloc_array) {
        return failed
    }
    memory.copy(
        c_str.data, self._heap_buf.data, str_len
    )
    self._heap_buf[str_len + 1] = 0
    self._heap_buf.len = str_len + 1
}

func str.init failable {
    self._on_heap = no
    self._stack_buf[1] = 0
    self._stack_buf_len = 1
}

func str.get_byte(idx <- size) readonly -> byte {
    var len <- size = self.len
    if idx < 1 or idx > len {
        return 0
    }
    if not self._on_heap {
        return self._stack_buf[idx]
    }
    return self._heap_buf.data[idx]
}

func str.add(other_str <- readonly str implicit ref) failable {
    var other_len <- size = other_str.len
    var other_data <- readonly byte c_array =
        other_str._stack_buf
    if other_str._on_heap {
        other_data = other_str._heap_buf.data
    }
    var other_array <- readonly byte array
    other_array.data = other_data
    other_array.len = other_len
    self.add(other_array)
    if failed(self.add) {
        return failed
    }
}

func str.add_byte(
        value <- byte
        ) failable override {
    var own_len <- size = self.len
    var needed_len <- size = own_len + 1 + 1
    if self._on_heap or needed_len > str_stack_bytes {
        var self_data <- byte c_array = self._stack_buf
        var clear_data <- byte c_array = none
        if self._on_heap {
            self_data = self._heap_buf.data
            clear_data = self._heap_buf.data
        }
        var new_data <- byte c_array =
            memory.alloc(needed_len)
        if failed(memory.alloc) {
            if clear_data != none {
                self._heap_buf.data = clear_data
            }
            return failed
        }
        memory.copy(self_data, new_data, own_len)
        new_data[own_len + 1] = value
        new_data[own_len + 2] = 0
        self._heap_buf.data = new_data
        memory.unalloc(clear_data)
        self._heap_buf.len = needed_len
        return
    }
    self._stack_buf[own_len + 1] = value
    self._stack_buf[own_len + 2] = 0
    self._stack_buf_len = needed_len
}

func str.add_c_str(
        c_str <- readonly byte c_array
        ) failable override {
    var byte_array <- readonly byte array =
        memory.alloc_array(
            0, 0
        )
    if failed(memory.alloc_array) {
        return failed
    }
    defer memory.unalloc_array(byte_array)
    byte_array.data = c_str
    assert(byte_array.len == memory.array_size_unset)
    self.add_bytebuf(
        byte_array
    )
    if failed(self.add_bytebuf) {
        return failed
    }
}

func str.add_bytebuf(
        bytebuf <- readonly byte array
        ) failable override {
    var c_str_len <- size = bytebuf.len
    if c_str_len == memory.array_size_unset {
        c_str_len = memory.c_str_nulpos(bytebuf.data)
    }
    var own_len <- size = self.len
    var needed_len <- size = c_str_len + own_len + 1
    if self._on_heap or needed_len > str_stack_bytes {
        var self_data <- byte c_array = self._stack_buf
        var clear_data <- byte c_array = none
        if self._on_heap {
            self_data = self._heap_buf.data
            clear_data = self._heap_buf.data
        }
        var new_data <- byte c_array =
            memory.alloc(needed_len)
        if failed(memory.alloc) {
            if clear_data != none {
                self._heap_buf.data = clear_data
            }
            return failed
        }
        memory.copy(self_data, new_data, own_len)
        memory.copy(
            bytebuf.data, new_data + own_len, c_str_len
        )
        new_data[own_len + c_str_len + 1] = 0
        self._heap_buf = new_data
        memory.unalloc(clear_data)
        self._heap_buf.len = needed_len
        return
    }
    memory.copy(
        bytebuf.data, self._stack_buf + own_len, c_str_len
    )
    self._stack_buf[own_len + c_str_len + 1] = 0
    self._stack_buf_len = needed_len
}

func str.len readonly -> size {
    if self._on_heap {
        return self._heap_buf.len - 1
    }
    return self._stack_buf_len - 1
}

func str.destroy {
    if self._on_heap {
        memory.unalloc_array(self._heap_buf)
    }
}

func str.copy_from(other_str <- readonly str implicit ref) failable {
    if not other_str._on_heap {
        if self._on_heap {
            memory.unalloc_array(self._heap_buf)
        }
        memory.copy(
            as_ref(other_str), as_ref(self),
            memory.size_of(self)
        )
        assert(not self._on_heap)
    } else {
        if self._on_heap {
            memory.unalloc_array(self._heap_buf)
        }
        self._on_heap = yes
        self._heap_buf = memory.alloc_array(
            1, other_str._heap_buf.len
        )
        if failed(memory.alloc_array) {
            return failed
        }
        memory.copy(
            other_str._heap_buf.data,
            self._heap_buf.data,
            other_str._heap_buf.len
        )
        self._heap_buf.len = other_str._heap_buf.len
    }
}

func str.get_c_str readonly -> readonly byte c_array {
    var result <- readonly byte c_array
    if self._on_heap {
        result = self._heap_buf.data
        return result
    }
    result = as(readonly byte c_array, self._stack_buf)
    return result
}

func format(format_mask <- readonly str implicit ref,
        ... <- multi(i8, i16, i32, i64,
            byte, u16, u32, u64,
            str implicit ref,
            any ref
            )) failable -> str {
    var format_args_count <- i32 = multi_args.len
    var result <- str("")
    if failed(str) {
        return failed
    }
    defer failed result.destroy()

    var i <- size = 1
    const len <- size = result.len
    while i <= len {
        var c <- byte = result.get_byte(i)
        if c == c"{" {
            if i + 1 <= len and
                    result.get_byte(i + 1) == c"{" {
                result.add(c)
                if failed(result.add) {
                    return failed
                }
                i += 2
                continue
            } elseif i + 1 <= len and
                    result.get_byte(i + 1) == c"}" {
                result.add("<unprintable value>")
                if failed(result.add) {
                    return failed
                }
                i += 2
                continue
            }
        } elseif c == c"}" {
            if i + 1 <= len and
                    result.get_byte(i + 1) == c"}" {
                result.add(c)
                if failed(result.add) {
                    return failed
                }
                i += 2
                continue
            }
        }
        i += 1
    }
    return result
}

func format_c_string(format_mask <- readonly byte c_array,
        ... <- multi(i8, i16, i32, i64,
            byte, u16, u32, u64,
            str implicit ref,
            any ref
            )) failable override -> str {
    var format_mask_str <- str(format_mask)
    if failed(str) {
        return failed
    }
    defer format_mask_str.destroy()

    var result <- str =
        format(format_mask_str, multi_args.forward())
    if failed(format) {
        return failed
    }
    return result
}

func num_to_str_buf(
        value <- u64,
        write_to <- byte c_array,
        write_to_len <- size) -> size {
    if write_to_len <= 0 {
        return 0
    }
    var numsbuf <- readonly byte c_array = "0123456789"
    var buf <- byte c_array[64]
    var writep <- byte c_array
    writep = buf
    while value >= 10 {
        assert(writep < buf + 63)
        var subvalue <- u64 = value - (value % 10)
        deref(writep) = numsbuf[subvalue]
        writep += 1
    }
    assert(writep < buf + 63)
    var subvalue <- u64 = value - (value % 10)
    deref(writep) = numsbuf[subvalue]
    writep += 1
    var numlen <- size = (writep - buf)
    if numlen > write_to_len {
        return 0
    }
    assert(numlen > 0)
    memory.copy(buf, write_to, numlen)
    return numlen
}

